{
  "settings": {
    "react": {
      "createClass": "createReactClass", // Regex for Component Factory to use,
      // default to "createReactClass"
      "pragma": "React", // Pragma to use, default to "React"
      "fragment": "Fragment", // Fragment to use (may be a property of <pragma>), default to "Fragment"
      "version": "detect", // React version. "detect" automatically picks the version you have installed.
      // You can also use `16.0`, `16.3`, etc, if you want to override the detected value.
      // default to latest and warns if missing
      // It will default to "detect" in the future
      "flowVersion": "0.53" // Flow version
    },
    "propWrapperFunctions": [
      // The names of any function used to wrap propTypes, e.g. `forbidExtraProps`. If this isn't set, any propTypes wrapped in a function will be skipped.
      "forbidExtraProps",
      { "property": "freeze", "object": "Object" },
      { "property": "myFavoriteWrapper" },
      // for rules that check exact prop wrappers
      { "property": "forbidExtraProps", "exact": true }
    ],
    "componentWrapperFunctions": [
      // The name of any function used to wrap components, e.g. Mobx `observer` function. If this isn't set, components wrapped by these functions will be skipped.
      "observer", // `property`
      { "property": "styled" }, // `object` is optional
      { "property": "observer", "object": "Mobx" },
      { "property": "observer", "object": "<pragma>" } // sets `object` to whatever value `settings.react.pragma` is set to
    ],
    "formComponents": [
      // Components used as alternatives to <form> for forms, eg. <Form endpoint={ url } />
      "CustomForm",
      { "name": "Form", "formAttribute": "endpoint" }
    ],
    "linkComponents": [
      // Components used as alternatives to <a> for linking, eg. <Link to={ url } />
      "Hyperlink",
      { "name": "Link", "linkAttribute": "to" }
    ]
  },
  "parser": "@typescript-eslint/parser",
  "env": {
    "node": true,
    "es6": true,
    "browser": true,
    "jest": true
  },
  "plugins": [
    "@typescript-eslint",
    "eslint-plugin-react",
    "babel",
    "eslint-plugin-import",
    "sonarjs",
    "jsx-a11y",
    "eslint-plugin-node",
    "eslint-plugin-prettier",
    "eslint-plugin-promise",
    "eslint-plugin-react",
    "eslint-plugin-react-hooks"
  ],
  "parserOptions": {
    "requireStringLiterals": false,
    "sourceType": "module",
    "ecmaFeatures": {
      "legacyDecorators": true,
      "jsx": true
    }
  },
  "ignorePatterns": [
    "/build",
    "/config",
    "/public",
    "/.idea",
    "/.git",
    "/node_modules",
    "/scripts",
    "*.css",
    "*.scss",
    "*.png",
    "*.jpeg",
    "*.jpg",
    "*.txt",
    "*.svg"
  ],
  "extends": ["plugin:sonarjs/recommended", "plugin:@typescript-eslint/recommended", "plugin:react/recommended", "eslint:recommended"],
  "rules": {
    "no-nested-ternary": "warn",
    "semi": ["error", "always"],
    "comma-dangle": ["error", "always-multiline"],
    "no-unused-vars": "off",
    "newline-before-return": "error",
    "object-curly-spacing": ["error", "always"],
    "quotes": ["error", "single", { "avoidEscape": true, "allowTemplateLiterals": true }],
    "sort-imports": "off",
    "no-case-declarations": "off",
    "no-redeclare": ["error", { "builtinGlobals": true }],
    "no-global-assign": "error",
    "no-restricted-globals": ["error", "close", "innerWidth", "performance", "innerHeight", "name", "length", "location"],
    "import/no-default-export": "error",
    "import/newline-after-import": "error",
    "import/order": [
      "error",
      {
        "warnOnUnassignedImports": true,
        "groups": ["builtin", "external", ["internal", "object", "parent", "sibling", "index", "type"]],
        "pathGroupsExcludedImportTypes": ["react", "src", "ui", "style"],
        "pathGroups": [
          {
            "pattern": "react",
            "group": "external",
            "position": "before"
          },
          {
            "pattern": "src/**",
            "group": "internal",
            "position": "before"
          }
        ]
      }
    ],
    "import/dynamic-import-chunkname": [
      "error",
      {
        "importFunctions": ["dynamicImport"],
        "webpackChunknameFormat": "[a-zA-Z0-9-/_]+"
      }
    ],
    "@typescript-eslint/interface-name-prefix": "off",
    "@typescript-eslint/ban-ts-comment": "warn",
    "@typescript-eslint/no-shadow": "error",
    "@typescript-eslint/no-unused-vars": "off",
    "@typescript-eslint/explicit-module-boundary-types": "off",
    "@typescript-eslint/triple-slash-reference": "off",
    "@typescript-eslint/ban-types": [
      "off",
      {
        "types": {
          // add a custom message, AND tell the plugin how to fix it
          // "String": {
          // "message": "Use \"string\" instead",
          // "fixWith": "string"
          // },

          "{}": ""
        }
      }
    ],

    "sonarjs/no-nested-template-literals": "off",
    "sonarjs/no-duplicate-string": "off",
    "sonarjs/no-identical-functions": "warn",

    "react/prop-types": "off",
    "react/react-in-jsx-scope": "off",
    "react/no-unescaped-entities": "off",

    "prettier/prettier": [
      "warn",
      {
        "endOfLine": "auto"
      }
    ]
  },
  "overrides": [
    {
      "files": ["**/*.test.ts", "**/*.test.tsx"],
      "env": {
        "jest": true
      }
    },
    {
      "files": ["*.ts", "*.mts", "*.cts", "*.tsx"],
      "rules": {
        "no-undef": "off"
      }
    }
  ]
}
